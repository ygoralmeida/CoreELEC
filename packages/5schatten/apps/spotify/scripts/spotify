#!/bin/sh
# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) Originally created by Escalade (https://github.com/escalade)
# Copyright (C) 2018-present 5schatten (https://github.com/5schatten)

. /etc/profile

ICON=/usr/config/spotify/icon.png
SPOTIFY_HOME=/storage/.cache/app.spotify
SPOTIFY_CACHE=/storage/.cache/spotify
SPOTIFY_CONFIG_PATH=/storage/.config/spotify
SPOTIFY_VERSION=$SPOTIFY_CONFIG_PATH/spotify.version
SPOTIFY_LOG=/var/log/spotify
SPOTIFY_BRANCH_SELECT=$SPOTIFY_CONFIG_PATH/stable
SPOTIFY_BRANCH_DEV=https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=spotify
SPOTIFY_BRANCH_STABLE=$SPOTIFY_BRANCH_DEV-stable

if [ -f $SPOTIFY_BRANCH_SELECT ]; then
  SPOTIFY_PKGVER=`curl -s "$SPOTIFY_BRANCH_STABLE" | grep -E '^pkgver=' | cut -c8-17`
  if [ -z "$1" ]; then
    export `curl -s "$SPOTIFY_BRANCH_STABLE" | grep -E '^pkgver='` || exit 1
    export `curl -s "$SPOTIFY_BRANCH_STABLE" | grep -E '^_commit='` || exit 1
    export `curl -s "$SPOTIFY_BRANCH_DEV" | grep -E '^source_x86_64='` || exit 1
    export `curl -s "$SPOTIFY_BRANCH_STABLE" | grep -E '^_ver_x86_64='`
    export url=`echo $source_x86_64 | sed s:\$\{pkgver\}:$pkgver: | sed s:\$\{_anotherpkgver\}:.$_commit: | sed s:\$\{_amd64_pkgrel\}:$_ver_x86_64: | cut -d \" -f 2`
  else
    export url="$1"
  fi
else
  SPOTIFY_PKGVER=`curl -s "$SPOTIFY_BRANCH_DEV" | grep -E '^pkgver=' | cut -c8-17`
  if [ -z "$1" ]; then
    export `curl -s "$SPOTIFY_BRANCH_DEV" | grep -E '^pkgver='` || exit 1
    export `curl -s "$SPOTIFY_BRANCH_DEV" | grep -E '^_anotherpkgver='` || exit 1
    export `curl -s "$SPOTIFY_BRANCH_DEV" | grep -E '^source_x86_64='` || exit 1
    export `curl -s "$SPOTIFY_BRANCH_DEV" | grep -E '^_amd64_pkgrel='`
    export url=`echo $source_x86_64 | sed s:\$\{pkgver\}:$pkgver: | sed s:\$\{_anotherpkgver\}:$_anotherpkgver: | sed s:\$\{_amd64_pkgrel\}:$_amd64_pkgrel: | cut -d \" -f 2`
  else
    export url="$1"
  fi 
fi

install_spotify() {
  kodi-send --action="Notification(Spotify,This is the first time you are starting Spotify. It is being downloaded in the background,13000,${ICON})"
  mkdir -p /tmp/spotify ; cd /tmp/spotify
  wget -q $url || exit 1
  kodi-send --action="Notification(Spotify,Download finished. Installing Spotify.,8000,${ICON})"
  ar -x *.deb && tar -zxf data.tar.gz
  rm -rf $SPOTIFY_CACHE
  mv usr/share/spotify $SPOTIFY_HOME
  echo $SPOTIFY_PKGVER > $SPOTIFY_VERSION 2>&1
  cd ~ ; rm -rf /tmp/spotify
}

update_spotify() {
  kodi-send --action="Notification(Spotify,Updating Spotify. It is being downloaded in the background.,8000,${ICON})"
  mkdir -p /tmp/spotify ; cd /tmp/spotify
  wget -q $url || exit 1
  kodi-send --action="Notification(Spotify,Download finished. Updating Spotify.,8000,${ICON})"
  ar -x *.deb && tar -zxf data.tar.gz
  rm -rf $SPOTIFY_HOME
  rm -rf $SPOTIFY_CACHE
  mv usr/share/spotify $SPOTIFY_HOME
  echo $SPOTIFY_PKGVER > $SPOTIFY_VERSION 2>&1
  cd ~ ; rm -rf /tmp/spotify
}

run_spotify() {
  kodifreeze.sh freeze_noPA
  systemctl stop pulseaudio

  $SPOTIFY_HOME/spotify "$@"

  systemctl start pulseaudio
  kodifreeze.sh unfreeze_noPA
}

if [ ! -x $SPOTIFY_HOME ]; then
  install_spotify "$1" > $SPOTIFY_LOG-install.log 2>&1
fi

if [ "$SPOTIFY_PKGVER" != "$(cat $SPOTIFY_VERSION)" ]; then
  update_spotify "$1" > $SPOTIFY_LOG-update.log 2>&1
fi

if [ -f $SPOTIFY_HOME/spotify ]; then
  # Set ALSA output device
  set_ALSA_output_device

  # Inform about missing asound.conf
  if [ ! -f /storage/.config/asound.conf ]; then
    missing_asound_conf
    usleep 21000000
  fi

  run_spotify "$@" > $SPOTIFY_LOG.log 2>&1
fi
